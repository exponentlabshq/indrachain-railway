name: Deploy IndraChain to Railway

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: ['9.4']
        cabal: ['3.8']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Haskell
        uses: haskell/actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Cache Haskell dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-ghc${{ matrix.ghc }}-cabal${{ matrix.cabal }}-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}

      - name: Install dependencies
        working-directory: services/indracore-vm
        run: |
          cabal update
          cabal build --dependencies-only

      - name: Build IndraCore VM
        working-directory: services/indracore-vm
        run: cabal build

      - name: Run tests
        working-directory: services/indracore-vm
        run: cabal test --test-show-details=direct

      - name: Build documentation
        working-directory: services/indracore-vm
        run: cabal haddock

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push IndraCore VM
        uses: docker/build-push-action@v5
        with:
          context: ./services/indracore-vm
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    if: github.ref == 'refs/heads/develop'
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Development
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment use development
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run health checks
        run: |
          sleep 60  # Wait for deployment
          ./scripts/health-check.sh development
        continue-on-error: true

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Staging
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment use staging
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run integration tests
        run: |
          sleep 120  # Wait for full deployment
          ./scripts/integration-test.sh staging
        continue-on-error: true

      - name: Post deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: '${{ job.status }}',
              environment_url: 'https://staging.indrachain.railway.app',
              description: 'IndraChain staging deployment'
            });

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  performance-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Run performance benchmarks
        run: |
          ./scripts/performance-test.sh staging
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json